  #include <Arduino.h>
  #include <SMS_STS.h>
  
  #define BAUD_RATE 115200
  
  // Cytron MDDA10 Motor pins
  #define MOTOR1_PWM 4
  #define MOTOR1_DIR 5
  #define MOTOR2_PWM 6
  #define MOTOR2_DIR 7
  #define MOTOR3_PWM 8
  #define MOTOR3_DIR 9
  #define MOTOR4_PWM 10
  #define MOTOR4_DIR 11
  
  #define TIMEOUT_MS 1500
  #define SERVO_DELAY_MS 500  // wait after moving servo before motors
  
  SMS_STS st,st2;
  
  // Struct for receiving data
  struct __attribute__((packed)) SwerveData {
    float motor1, motor2, motor3, motor4;
    float servo1, servo2, servo3, servo4;
    int32_t checksum;   
  };
  
  SwerveData receivedData;
  SwerveData nextData;
  bool hasNewCommand = false;
  bool isTimedOut = false;
  
  unsigned long lastUpdateTime = 0;
  unsigned long servoStartTime = 0;
  
  bool newDataReceived = false;
  
  enum SystemState { IDLE, WAITING_SERVO, MOVING_MOTORS };
  SystemState currentState = IDLE;
  
  void controlMotor(int pwmPin, int dirPin, float speed) {
    //int speedint = speed * 11;
    int speedint = map(speed,-10.7,10.7,-130,130);
    if (speedint > 0) {
      digitalWrite(dirPin, HIGH);
    } else {
      digitalWrite(dirPin, LOW);
      speedint = -speedint;
    }
    Serial.print("Speed Command: ");
    Serial.println(speedint);
    analogWrite(pwmPin, speedint);
  }
  
  void controlServo(int id, float angle, int num) {
    int angleint = angle * 100;
    int pos = map(angleint, -157, 157, 0, 4095);
    int speed = 2000;
    int torque = 50;
    if(num == 1){st.WritePosEx(id, pos, speed, torque);}
    if(num == 2){st2.WritePosEx(id, pos, speed, torque);}
    
  }
  
  void stopAllMotors() {
    controlMotor(MOTOR1_PWM, MOTOR1_DIR, 0);
    controlMotor(MOTOR2_PWM, MOTOR2_DIR, 0);
    controlMotor(MOTOR3_PWM, MOTOR3_DIR, 0);
    controlMotor(MOTOR4_PWM, MOTOR4_DIR, 0);
  }
  
  void setup() {
    Serial.begin(BAUD_RATE);
    Serial2.begin(1000000);
    st.pSerial = &Serial2;
    Serial3.begin(1000000);
    st2.pSerial = &Serial3;
  
    Serial.println("‚úÖ Arduino Mega Ready to Receive Data");
    //Serial.print("Expected struct size: ");
    //Serial.println(sizeof(SwerveData));
  
    pinMode(MOTOR1_PWM, OUTPUT); pinMode(MOTOR1_DIR, OUTPUT);
    pinMode(MOTOR2_PWM, OUTPUT); pinMode(MOTOR2_DIR, OUTPUT);
    pinMode(MOTOR3_PWM, OUTPUT); pinMode(MOTOR3_DIR, OUTPUT);
    pinMode(MOTOR4_PWM, OUTPUT); pinMode(MOTOR4_DIR, OUTPUT);
  
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà 90 ‡∏≠‡∏á‡∏®‡∏≤
      int angleini = 180;
      int degree = map(angleini, 0, 360, 0, 4095);
      st.WritePosEx(1, degree, 1500, 50);
      st.WritePosEx(2, degree, 1500, 50);
      st2.WritePosEx(1, degree, 1500, 50);
      st2.WritePosEx(2, degree, 1500, 50);
      Serial.println("Servo Set 90 Degree");
      delay(2000);
  
    stopAllMotors();
  }

 
void loop() {
  // 0. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ Serial buffer overflow ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
  if (Serial.available() > 100) {
    Serial.println("‚ö†Ô∏è Overflow! Clearing Serial buffer...");
    while (Serial.available()) Serial.read();
    currentState = IDLE;
    return;
  }

  // 1. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ROS2 ‚Üí ‡∏•‡∏á‡πÉ‡∏ô nextData
  if (Serial.available() >= sizeof(SwerveData)) {
    Serial.readBytes((uint8_t*)&nextData, sizeof(SwerveData));
    while (Serial.available()) Serial.read();  // ‡∏•‡πâ‡∏≤‡∏á buffer ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á
    lastUpdateTime = millis();  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    isTimedOut = false;  // ‚úÖ ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ timeout

      // DEBUG: ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    Serial.println("‚úÖ Data Received!");
    Serial.print("Motors: ");
    Serial.print(receivedData.motor1); Serial.print(", ");
    Serial.print(receivedData.motor2); Serial.print(", ");
    Serial.print(receivedData.motor3); Serial.print(", ");
    Serial.println(receivedData.motor4);

    Serial.print("Servos: ");
    Serial.print(receivedData.servo1); Serial.print(", ");
    Serial.print(receivedData.servo2); Serial.print(", ");
    Serial.print(receivedData.servo3); Serial.print(", ");
    Serial.println(receivedData.servo4);

    Serial.print("Checksum: ");
    Serial.println(receivedData.checksum);
    Serial.println("------------------------------");

    if (currentState == IDLE) {
      // ‡∏ñ‡πâ‡∏≤‡∏´‡∏∏‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      receivedData = nextData;
      hasNewCommand = false;
      servoStartTime = millis();
      currentState = WAITING_SERVO;
      Serial.println("‚è±Ô∏è New command started immediately");
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      hasNewCommand = true;
      Serial.println("üïí New command queued for next execution");
    }
  }

  // 2. ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÉ‡∏´‡πâ servo ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡πà‡∏≠‡∏ô (delay servo)
  if (currentState == WAITING_SERVO && millis() - servoStartTime >= SERVO_DELAY_MS) {
    Serial.println("üîÑ Moving Servos...");
    controlServo(1, receivedData.servo1, 1); // servo ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - ‡∏ã‡πâ‡∏≤‡∏¢
    controlServo(2, receivedData.servo2, 1); // servo ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - ‡∏Ç‡∏ß‡∏≤
    controlServo(1, receivedData.servo3, 2); // servo ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á - ‡∏ã‡πâ‡∏≤‡∏¢
    controlServo(2, receivedData.servo4, 2); // servo ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á - ‡∏Ç‡∏ß‡∏≤
    currentState = MOVING_MOTORS;
  }

  // 3. ‡∏´‡∏•‡∏±‡∏á servo ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡πâ‡∏≠
  if (currentState == MOVING_MOTORS) {
    Serial.println("üöó Moving Motors...");
    controlMotor(MOTOR1_PWM, MOTOR1_DIR, receivedData.motor1);// ‡∏•‡πâ‡∏≠‡∏™‡∏ß‡∏ô
    controlMotor(MOTOR2_PWM, MOTOR2_DIR, -receivedData.motor2); 
    //controlMotor(MOTOR3_PWM, MOTOR3_DIR, receivedData.motor3);  
    //controlMotor(MOTOR4_PWM, MOTOR4_DIR, -receivedData.motor4);  // ‡∏•‡πâ‡∏≠‡∏™‡∏ß‡∏ô

    if (hasNewCommand) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
      receivedData = nextData;
      hasNewCommand = false;
      servoStartTime = millis();
      currentState = WAITING_SERVO;
      Serial.println("‚ö° Executing queued command");
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡∏á
      currentState = IDLE;
      Serial.println("‚úÖ Done. No queued command.");
    }
  }

  // 4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô TIMEOUT_MS ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡πâ‡∏≠
  if (!isTimedOut && millis() - lastUpdateTime > TIMEOUT_MS) {
    stopAllMotors();
    currentState = IDLE;
    isTimedOut = true;  // ‚úÖ ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ timeout ‡πÅ‡∏•‡πâ‡∏ß
    Serial.println("üõë Timeout! Motors stopped.");
  }
}



  
